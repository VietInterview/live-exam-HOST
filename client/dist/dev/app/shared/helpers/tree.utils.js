"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("underscore");
var TreeUtils = (function () {
    function TreeUtils() {
    }
    TreeUtils.prototype.buildTree = function (groups) {
        return this.buildSubTree(null, groups);
    };
    TreeUtils.prototype.getSubGroup = function (groups, parentId) {
        var _this = this;
        return _.filter(groups, function (group) {
            return _this.isSubGroup(groups, group, parentId);
        });
    };
    TreeUtils.prototype.isSubGroup = function (groups, target, parentId) {
        while (target) {
            if (target.id == parentId)
                return true;
            if (target.parent_id)
                target = _.find(groups, function (group) {
                    return group.id == target.parent_id;
                });
        }
        return false;
    };
    TreeUtils.prototype.buildSubTree = function (parentGroup, groups) {
        var _this = this;
        var subTrees = [];
        var directChilds = [];
        if (!parentGroup)
            directChilds = _.filter(groups, function (group) {
                return !group.parent_id;
            });
        else {
            directChilds = _.filter(groups, function (group) {
                return parentGroup.id == group.parent_id;
            });
        }
        _.each(directChilds, function (group) {
            subTrees.push({
                data: group,
                label: group.name,
                expanded: true,
                expandedIcon: "ui-icon-folder-open",
                collapsedIcon: "ui-icon-folder",
                children: _this.buildSubTree(group, groups)
            });
        });
        return subTrees;
    };
    TreeUtils.prototype.findTreeNode = function (tree, groupId) {
        for (var i = 0; i < tree.length; i++) {
            var node = tree[i];
            var found = this.findTreeSubNode(node, groupId);
            if (found)
                return found;
        }
        return null;
    };
    TreeUtils.prototype.findTreeSubNode = function (node, groupId) {
        if (node.data.id == groupId)
            return node;
        for (var i = 0; i < node.children.length; i++) {
            var childNode = node.children[i];
            var found = this.findTreeSubNode(childNode, groupId);
            if (found)
                return found;
        }
        return null;
    };
    return TreeUtils;
}());
exports.TreeUtils = TreeUtils;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zaGFyZWQvaGVscGVycy90cmVlLnV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsOEJBQWdDO0FBR2hDO0lBRUU7SUFDQSxDQUFDO0lBRUQsNkJBQVMsR0FBVCxVQUFVLE1BQWU7UUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCwrQkFBVyxHQUFYLFVBQVksTUFBYyxFQUFFLFFBQWU7UUFBM0MsaUJBSUM7UUFIQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsVUFBQyxLQUFXO1lBQ2hDLE1BQU0sQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sOEJBQVUsR0FBbEIsVUFBbUIsTUFBYyxFQUFFLE1BQWEsRUFBRSxRQUFlO1FBQy9ELE9BQU8sTUFBTSxFQUFFLENBQUM7WUFDZCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLFFBQVEsQ0FBQztnQkFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNkLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7Z0JBQ25CLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxVQUFDLEtBQUs7b0JBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUM7Z0JBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU8sZ0NBQVksR0FBcEIsVUFBcUIsV0FBa0IsRUFBRSxNQUFlO1FBQXhELGlCQXdCQztRQXZCQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1lBQ2YsWUFBWSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQUMsS0FBSztnQkFDcEMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztZQUMxQixDQUFDLENBQUMsQ0FBQztRQUNMLElBQUksQ0FBQyxDQUFDO1lBQ0osWUFBWSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQUMsS0FBSztnQkFDcEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQztZQUMzQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxVQUFDLEtBQUs7WUFDekIsUUFBUSxDQUFDLElBQUksQ0FDWDtnQkFDRSxJQUFJLEVBQUUsS0FBSztnQkFDWCxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ2pCLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFlBQVksRUFBRSxxQkFBcUI7Z0JBQ25DLGFBQWEsRUFBRSxnQkFBZ0I7Z0JBQy9CLFFBQVEsRUFBRSxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUM7YUFDM0MsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxnQ0FBWSxHQUFaLFVBQWEsSUFBSSxFQUFFLE9BQU87UUFDeEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDckMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFDUixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLG1DQUFlLEdBQXZCLFVBQXdCLElBQUksRUFBRSxPQUFPO1FBQ25DLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQztZQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzlDLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDckQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUNSLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQTFFQSxBQTBFQyxJQUFBO0FBMUVZLDhCQUFTIiwiZmlsZSI6ImFwcC9zaGFyZWQvaGVscGVycy90cmVlLnV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMvUngnXG5pbXBvcnQgeyBHcm91cCB9IGZyb20gJy4uL21vZGVscy9ncm91cC5tb2RlbCc7XG5pbXBvcnQgKiBhcyBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgVHJlZVV0aWxzIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIGJ1aWxkVHJlZShncm91cHM6IEdyb3VwW10pOmFueVtdIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZFN1YlRyZWUobnVsbCwgZ3JvdXBzKTtcbiAgfVxuXG4gIGdldFN1Ykdyb3VwKGdyb3VwczpHcm91cFtdLCBwYXJlbnRJZDpudW1iZXIpOmFueVtdIHtcbiAgICByZXR1cm4gXy5maWx0ZXIoZ3JvdXBzLCAoZ3JvdXA6R3JvdXApPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1N1Ykdyb3VwKGdyb3VwcywgZ3JvdXAsIHBhcmVudElkKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1N1Ykdyb3VwKGdyb3VwczpHcm91cFtdLCB0YXJnZXQ6IEdyb3VwLCBwYXJlbnRJZDpudW1iZXIpOmJvb2xlYW4ge1xuICAgIHdoaWxlICh0YXJnZXQpIHtcbiAgICAgIGlmICh0YXJnZXQuaWQgPT0gcGFyZW50SWQpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRhcmdldC5wYXJlbnRfaWQpXG4gICAgICAgIHRhcmdldCA9IF8uZmluZChncm91cHMsIChncm91cCk9PiB7XG4gICAgICAgIHJldHVybiBncm91cC5pZCA9PSB0YXJnZXQucGFyZW50X2lkO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRTdWJUcmVlKHBhcmVudEdyb3VwOiBHcm91cCwgZ3JvdXBzOiBHcm91cFtdKTphbnlbXSB7XG4gICAgdmFyIHN1YlRyZWVzID0gW107XG4gICAgdmFyIGRpcmVjdENoaWxkcyA9IFtdO1xuICAgIGlmICghcGFyZW50R3JvdXApXG4gICAgICBkaXJlY3RDaGlsZHMgPSBfLmZpbHRlcihncm91cHMsIChncm91cCk9PiB7XG4gICAgICAgIHJldHVybiAhZ3JvdXAucGFyZW50X2lkO1xuICAgICAgfSk7XG4gICAgZWxzZSB7XG4gICAgICBkaXJlY3RDaGlsZHMgPSBfLmZpbHRlcihncm91cHMsIChncm91cCk9PiB7XG4gICAgICAgIHJldHVybiBwYXJlbnRHcm91cC5pZCA9PSBncm91cC5wYXJlbnRfaWQ7XG4gICAgICB9KTtcbiAgICB9XG4gICAgXy5lYWNoKGRpcmVjdENoaWxkcywgKGdyb3VwKT0+IHtcbiAgICAgIHN1YlRyZWVzLnB1c2goXG4gICAgICAgIHtcbiAgICAgICAgICBkYXRhOiBncm91cCxcbiAgICAgICAgICBsYWJlbDogZ3JvdXAubmFtZSxcbiAgICAgICAgICBleHBhbmRlZDogdHJ1ZSxcbiAgICAgICAgICBleHBhbmRlZEljb246IFwidWktaWNvbi1mb2xkZXItb3BlblwiLFxuICAgICAgICAgIGNvbGxhcHNlZEljb246IFwidWktaWNvbi1mb2xkZXJcIixcbiAgICAgICAgICBjaGlsZHJlbjogdGhpcy5idWlsZFN1YlRyZWUoZ3JvdXAsIGdyb3VwcylcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHN1YlRyZWVzO1xuICB9XG5cbiAgZmluZFRyZWVOb2RlKHRyZWUsIGdyb3VwSWQpOmFueSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbm9kZSA9IHRyZWVbaV07XG4gICAgICB2YXIgZm91bmQgPSB0aGlzLmZpbmRUcmVlU3ViTm9kZShub2RlLCBncm91cElkKTtcbiAgICAgIGlmIChmb3VuZClcbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgZmluZFRyZWVTdWJOb2RlKG5vZGUsIGdyb3VwSWQpOmFueSB7XG4gICAgaWYgKG5vZGUuZGF0YS5pZCA9PSBncm91cElkKVxuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGROb2RlID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIHZhciBmb3VuZCA9IHRoaXMuZmluZFRyZWVTdWJOb2RlKGNoaWxkTm9kZSwgZ3JvdXBJZCk7XG4gICAgICBpZiAoZm91bmQpXG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdfQ==
